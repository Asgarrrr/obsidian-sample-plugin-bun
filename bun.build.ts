#!/usr/bin/env bun
import builtins from "builtin-modules";
import { build } from "bun";
import { watch } from "fs";

const banner = `/*
THIS IS A GENERATED/BUNDLED FILE BY BUN
if you want to view the source, please visit the github repository of this plugin
*/
`;

const isProd = process.argv[2] === "production";

const config = {
	entrypoints: ["src/main.ts"],
	outdir: ".",
	target: "browser" as const,
	format: "cjs" as const,
	minify: isProd,
	sourcemap: isProd ? ("none" as const) : ("inline" as const),
	banner,
	naming: { entry: "main.js" },
	external: [
		"obsidian",
		"electron",
		"@codemirror/autocomplete",
		"@codemirror/collab",
		"@codemirror/commands",
		"@codemirror/language",
		"@codemirror/lint",
		"@codemirror/search",
		"@codemirror/state",
		"@codemirror/view",
		"@lezer/common",
		"@lezer/highlight",
		"@lezer/lr",
		...builtins,
	],
};

async function buildPlugin() {
	const result = await build(config);

	if (!result.success) {
		console.error("Build failed:");
		result.logs.forEach((log) => console.error(log));
		process.exit(1);
	}

	console.log("Build completed successfully!");
	return result;
}

function startWatcher() {
	console.log("Watching for changes...");
	let isBuilding = false;

	watch("src", { recursive: true }, async (_, filename) => {
		if (!filename?.endsWith(".ts") || isBuilding) return;

		isBuilding = true;
		console.log(`File changed: ${filename}`);
		console.log("Rebuilding...");

		try {
			await buildPlugin();
		} catch (error) {
			console.error("Rebuild failed:", error);
		} finally {
			isBuilding = false;
		}
	});
}

async function main() {
	await buildPlugin();
	if (!isProd) startWatcher();
}

main();
